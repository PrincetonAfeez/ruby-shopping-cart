require 'digest/sha2'

class User < ActiveRecord::Base
  validates :name, :presence => true , :uniqueness => true
  validates :password, :confirmation => true

  attr_accessor :password_confirmation  
  attr_accessor :password 

  after_destroy :ensure_an_admin_remains
  #  validates :password_must_be_present

  # 虚拟属性 
  def password=(password)
    @password = password
    if password.present?
      generate_salt
      self.hashed_password = self.class.encrypt_password(password,salt)
    end
  end
  
  def User.authenticate(name,password)
    puts "************",name 
    puts "************",password  
    if user = find_by_name(name)
      puts "*******************"
      puts user.inspect 
      pust salt 
      puts encrypt_password(password,salt)
      puts "*******************"
      if user.hashed_password == self.calss.encrypt_password(password,salt)
        user
      end
    end
    puts "***********",user.inspect  
  end

  def User.encrypt_password(password,salt)
    Digest::SHA2.hexdigest(password + 'wibble' + salt)
  end

  def ensure_an_admin_remains
    if User.count.zero?
      raise "Can't delete last user"
    end
  end

  private
    def password_must_be_present 
      errors.add(:password, "Missing password") unless hashed_password.present?
    end 

    def generate_salt
      self.salt = self.object_id.to_s + rand.to_s
    end 
end
